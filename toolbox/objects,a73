#
# RISC OS Toolbox - Objects
#
class Object:
    class_id  = None
    name      = None
    _classes  = {} # (ID,Name) -> Class

    def __init__(self, id):
        self.id = id

    def __init_subclass__(subclass):
        Object._classes[(subclass.class_id, subclass.name)] = subclass

    @staticmethod
    def create(class_id, name, id):
        if (class_id,name) in Object._classes:
            return Object._classes[(class_id,name)](id)
        if (class_id,None) in Object._classes:
            return Object._classes[(class_id,None)](id)
        else:
            return Object(id)

class Window(Object):
    class_id = 0x82880
    def __init__(self, id):
        Object.__init__(self, id)
        self.gadgets = {}

    def _call_function(self, id_block, format, *args):
        """Finds the function to call for the given component in id_block,
           using the format string 'format' where {} will be replaced with the
            gadget name. If found, will be called with args."""
        component = id_block.self_component
        if component in self.gadgets:
            gadget = self.gadgets[component]
            for obj in self.__dir__():
                if getattr(self, obj) == gadget:
                    func_name = format.format(obj)
                    if func_name in self.__dir__():
                        getattr(self, func_name)(*args)

    def actionbutton_selected(self, id_block):
        self._call_function(id_block, '{}_selected')

    def optionbutton_state_changed(self, id_block, state):
        self._call_function(id_block, '{}_state_changed', state)

    def radiobutton_state_changed(self, id_block, state, old_on):
        self._call_function(id_block, '{}_state_changed', state, old_on)

    def adjuster_clicked(self, id_block, dir):
        self._call_function(id_block, '{}_clicked', dir)

    def slider_changed(self, id_block, value):
        self._call_function(id_block, '{}_changed', value)

    def popup_about_to_be_shown(self, id_block, menu_id, show_type, top_left):
        self._call_function(id_block, '{}_about_to_be_shown',
            menu_id, show_type, top_left)

    def stringset_value_changed(self, id_block, value):
        self._call_function(id_block, '{}_value_changed', value)

    def numberrange_value_changed(self, id_block, value):
        self._call_function(id_block, '{}_value_changed', value)

    def drag_ended(self, id_block, window, icon, mouse_pos):
        self._call_function(id_block, '{}_drag_ended', window, icon, mouse_pos)

class ProgInfo(Object):
    class_id = 0x82b40
    def __init__(self, id):
        Object.__init__(self, id)

class Menu(Object):
    class_id = 0x828c0
    def __init__(self, id):
        Object.__init__(self, id)

    def menu_selection(self, id_block):
        func_name = 'item_{}_selected'.format(id_block.self_component)
        if func_name in self.__dir__():
            getattr(self, func_name)()
